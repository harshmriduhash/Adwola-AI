-- Enable pg_cron extension for scheduled tasks
CREATE EXTENSION IF NOT EXISTS pg_cron;

-- Create function to process scheduled posts
CREATE OR REPLACE FUNCTION process_scheduled_posts()
RETURNS void AS $$
BEGIN
  -- Update posts that are scheduled for now or earlier to 'ready_to_post' status
  UPDATE generated_posts 
  SET status = 'ready_to_post'
  WHERE status = 'scheduled' 
    AND schedule_time <= NOW();
    
  -- Log the scheduling activity
  INSERT INTO scheduling_logs (processed_at, posts_processed)
  SELECT NOW(), COUNT(*)
  FROM generated_posts 
  WHERE status = 'ready_to_post' 
    AND schedule_time <= NOW();
END;
$$ LANGUAGE plpgsql;

-- Create scheduling logs table
CREATE TABLE public.scheduling_logs (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  processed_at timestamptz DEFAULT now(),
  posts_processed int DEFAULT 0,
  notes text
);

-- Enable RLS on scheduling logs
ALTER TABLE public.scheduling_logs ENABLE ROW LEVEL SECURITY;

-- Only authenticated users can view scheduling logs (admin feature)
CREATE POLICY "Authenticated users can view scheduling logs" ON public.scheduling_logs
  FOR SELECT USING (auth.role() = 'authenticated');

-- Schedule the function to run every minute
SELECT cron.schedule(
  'process-scheduled-posts',
  '* * * * *', -- Every minute
  'SELECT process_scheduled_posts();'
);

-- Schedule the publish-post function to run every 2 minutes
SELECT cron.schedule(
  'publish-ready-posts',
  '*/2 * * * *', -- Every 2 minutes
  'SELECT net.http_post(
    url := ''https://your-project-ref.supabase.co/functions/v1/publish-post'',
    headers := ''{"Content-Type": "application/json", "Authorization": "Bearer " || current_setting(''app.service_role_key'')}'',
    body := ''{}''
  );'
);

-- Add scheduling-related columns if they don't exist
ALTER TABLE public.generated_posts 
ADD COLUMN IF NOT EXISTS scheduled_by uuid REFERENCES public.users(id),
ADD COLUMN IF NOT EXISTS scheduled_at timestamptz,
ADD COLUMN IF NOT EXISTS posted_at timestamptz,
ADD COLUMN IF NOT EXISTS posting_error text;

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_generated_posts_schedule_time ON public.generated_posts(schedule_time) WHERE status = 'scheduled';
CREATE INDEX IF NOT EXISTS idx_generated_posts_status ON public.generated_posts(status);

-- Create function to schedule a post
CREATE OR REPLACE FUNCTION schedule_post(
  post_id uuid,
  schedule_time timestamptz,
  user_id uuid
)
RETURNS json AS $$
DECLARE
  result json;
BEGIN
  -- Verify the user owns this post
  IF NOT EXISTS (
    SELECT 1 FROM generated_posts gp
    JOIN content_briefs cb ON gp.brief_id = cb.id
    WHERE gp.id = post_id AND cb.user_id = schedule_post.user_id
  ) THEN
    RETURN json_build_object('success', false, 'error', 'Post not found or access denied');
  END IF;
  
  -- Update the post with scheduling information
  UPDATE generated_posts 
  SET 
    status = 'scheduled',
    schedule_time = schedule_post.schedule_time,
    scheduled_by = schedule_post.user_id,
    scheduled_at = NOW()
  WHERE id = post_id;
  
  RETURN json_build_object('success', true, 'message', 'Post scheduled successfully');
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create function to cancel scheduled post
CREATE OR REPLACE FUNCTION cancel_scheduled_post(
  post_id uuid,
  user_id uuid
)
RETURNS json AS $$
BEGIN
  -- Verify the user owns this post
  IF NOT EXISTS (
    SELECT 1 FROM generated_posts gp
    JOIN content_briefs cb ON gp.brief_id = cb.id
    WHERE gp.id = post_id AND cb.user_id = cancel_scheduled_post.user_id
  ) THEN
    RETURN json_build_object('success', false, 'error', 'Post not found or access denied');
  END IF;
  
  -- Update the post to remove scheduling
  UPDATE generated_posts 
  SET 
    status = 'approved',
    schedule_time = NULL,
    scheduled_by = NULL,
    scheduled_at = NULL
  WHERE id = post_id AND status = 'scheduled';
  
  RETURN json_build_object('success', true, 'message', 'Scheduled post cancelled');
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;